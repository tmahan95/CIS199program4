Create a Windows Forms application with two classes. One class will be the form that will drive the application. The other public class will be named GroundPackage and will be our initial attempt at representing some of the packages delivered by Brown Parcel Service. At the moment, our ground package class will be very simple. Each GroundPackage object will keep track of some basic information: the package's origin zip code (an int), destination zip code (an int), length in inches (positive double), width in inches (positive double), height in inches (positive double), and the weight in pounds (positive double). Later, we may add more capabilities (in CIS 200) but this is a good start.

The specific public requirements for the GroundPackage class are listed below. You may not change or add to the public interface described here.

A 6 parameter constructor that accepts the origin zip code (a 5 digit int), destination zip code (a 5 digit int), length in inches (positive double), width in inches (positive double), height in inches (positive double), and the weight in pounds (positive double). Use the set properties for all relevant fields to establish their initial values (instead of directly changing instance variables.
An int property named OriginZip with a get and a set. To practice validation, you must ensure that the specified zip code is between 00000 and 99999 when attempting to set; otherwise, do not change the zip code.
An int property named DestinationZip with a get and a set. To practice validation, you must ensure that the specified zip code is between 00000 and 99999 when attempting to set; otherwise, do not change the zip code.
double get and set properties for each of the other data fields (named Length, Width, Height, and Weight). To practice validation, you must ensure that the specified dimension is greater than zero when attempting to set; otherwise, do not change the property's value.
An int property named ZoneDistance with a get (but no set). The zone distance is the positive difference between the first digit of the origin zip code and the first digit of the destination zip code. For example, the zone distance between zip codes 50000 and 10000 is 4 (5-1).
A method named CalcCost that returns a double and accepts no parameters. Calculate the shipping cost as
Cost (in dollars) = .20*(Length + Width + Height) + .5*(ZoneDist + 1)*(Weight)
A method named ToString that returns a String and accepts no parameters. Remember, you must also use keyword override when defining a ToString method. This method will create a formatted string that has the package's data, each on a separate line. Precede each item with an identifying label. You may use string concatenation, composite formatting with the String.Format method, or some combination to create the formatted text that the method will return. Instead of concatenating the string literal "\n" to add a newline to the string, use the string constant System.Environment.NewLine instead. Note well, the ToString method just builds and returns a string. It does no output of its own. That is up to client classes to perform, as the output may be directed to the console or a GUI or a web page.
In addition to the GroundPackage class, you will need to write a simple Windows Forms application to test your packages. This form will be similar in appearance to Figure 9-16 from Tutorial 9-4 on p. 564 of the text. On the left of the form, you'll have text boxes for all the relevant fields of the GroundPackage class (origin zip, destination zip, length, width, height, and weight) and a button that will add a package to the list being maintained by the form. If any of these fields are empty or invalid when the add button is clicked, display an appropriate error message. On the right of the form will be a ListBox containing the costs of the packages. In addition, there will be buttons to the right of the ListBox that will be used to act on the package selected from the ListBox. One button will be labeled "Details" and when clicked will display a MessageBox providing all the details of the selected package (using its ToString method) . One button will be labeled "Send to UofL" and when clicked will set the destination zip code of the selected package to 40292 (using its property) and display a message indicating that the specified package has been reset. One button will be labeled "Send from UofL" and when clicked will set the origin zip code of the selected package to 40292 (using its propert) and display a message indicating that the specified package has been reset. If the user clicks on one of these buttons without a package having been selected, display an appropriate error message. Hint, the ListBox will return -1 for its SelectedIndex when no item has been selected yet.

Be sure to add appropriate comments in your code, including your name, program number, due date, and course section. Each variable used in your program needs a comment describing its purpose. Put these at the top of file that holds your event handler(s). You may leave the other files including Program.cs unchanged. Do not worry about the GUI variables, as they are auto-generated in the .Designer.cs file. These requirements are expected for every program and are listed in the syllabus. Preconditions and postconditions are now required, as well.